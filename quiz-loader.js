(function() {
  'use strict';

  // Centralized quiz configurations
  var ThaiQuizConfigs = {
    consonants: {
      title: 'Thai Consonant Quiz',
      subtitle: '',
      bodyClass: 'consonant-quiz',
      init: function() {
        // Insert legend above the symbol
        try {
          var symbolAnchor = document.getElementById('symbol');
          if (symbolAnchor && symbolAnchor.parentNode) {
            var legend = document.createElement('div');
            legend.className = 'legend';
            legend.innerHTML = '<span class="legend-item"><span class="legend-color middle-class"></span> Middle Class</span>' +
                               '<span class="legend-item"><span class="legend-color high-class"></span> High Class</span>' +
                               '<span class="legend-item"><span class="legend-color low-class"></span> Low Class</span>';
            symbolAnchor.parentNode.insertBefore(legend, symbolAnchor);
          }
        } catch (e) {}

        var data = JSON.parse(`[
  {
    "symbol": "‡∏Å",
    "name": "g…î…î g√†i",
    "meaning": "chicken",
    "emoji": "üêî",
    "class": "middle"
  },
  {
    "symbol": "‡∏Ç",
    "name": "kh…îÃå…î kh√†i",
    "meaning": "egg",
    "emoji": "ü•ö",
    "class": "high"
  },
  {
    "symbol": "‡∏É",
    "name": "kh…îÃå…î kh√πat",
    "meaning": "bottle",
    "emoji": "üçæ",
    "class": "high"
  },
  {
    "symbol": "‡∏Ñ",
    "name": "kh…î…î khwaay",
    "meaning": "water buffalo",
    "emoji": "üêÉ",
    "class": "low"
  },
  {
    "symbol": "‡∏Ö",
    "name": "kh…î…î khon",
    "meaning": "human",
    "emoji": "üë§",
    "class": "low"
  },
  {
    "symbol": "‡∏Ü",
    "name": "kh…î…î r√°-kha≈ã",
    "meaning": "bell",
    "emoji": "üîî",
    "class": "low"
  },
  {
    "symbol": "‡∏á",
    "name": "≈ã…î…î ≈ãuu",
    "meaning": "snake",
    "emoji": "üêç",
    "class": "low"
  },
  {
    "symbol": "‡∏à",
    "name": "j…î…î jaan",
    "meaning": "plate",
    "emoji": "üçΩÔ∏è",
    "class": "middle"
  },
  {
    "symbol": "‡∏â",
    "name": "ch…îÃå…î ch√¨≈ã",
    "meaning": "cymbal",
    "emoji": "ü•Å",
    "class": "high"
  },
  {
    "symbol": "‡∏ä",
    "name": "ch…î…î ch√°a≈ã",
    "meaning": "elephant",
    "emoji": "üêò",
    "class": "low"
  },
  {
    "symbol": "‡∏ã",
    "name": "s…î…î s√¥o",
    "meaning": "chain",
    "emoji": "‚õìÔ∏è",
    "class": "low"
  },
  {
    "symbol": "‡∏å",
    "name": "ch…î…î ch…ô…ô",
    "meaning": "name of tree",
    "emoji": "üå≥",
    "class": "low"
  },
  {
    "symbol": "‡∏ç",
    "name": "y…î…î ph√ªu y«ê≈ã",
    "meaning": "female",
    "emoji": "üë©",
    "class": "low"
  },
  {
    "symbol": "‡∏é",
    "name": "d…î…î ch√°-daa",
    "meaning": "head dress",
    "emoji": "üëë",
    "class": "middle"
  },
  {
    "symbol": "‡∏è",
    "name": "dt…î…î bp√†-dt√†k",
    "meaning": "lance",
    "emoji": "‚öîÔ∏è",
    "class": "middle"
  },
  {
    "symbol": "‡∏ê",
    "name": "th…îÃå…î th…ëÃå…ën",
    "meaning": "pedestal",
    "emoji": "üèõÔ∏è",
    "class": "high"
  },
  {
    "symbol": "‡∏ë",
    "name": "th…î…î mon-thoo",
    "meaning": "Lady Montho",
    "emoji": "üë∏",
    "class": "low"
  },
  {
    "symbol": "‡∏í",
    "name": "th…î…î ph√ªu-th√¢w",
    "meaning": "elderly",
    "emoji": "üë¥",
    "class": "low"
  },
  {
    "symbol": "‡∏ì",
    "name": "n…î…î neen",
    "meaning": "novice",
    "emoji": "üßò",
    "class": "low"
  },
  {
    "symbol": "‡∏î",
    "name": "d…î…î d√®k",
    "meaning": "child",
    "emoji": "üë∂",
    "class": "middle"
  },
  {
    "symbol": "‡∏ï",
    "name": "dt…î…î dt√†w",
    "meaning": "turtle",
    "emoji": "üê¢",
    "class": "middle"
  },
  {
    "symbol": "‡∏ñ",
    "name": "th…îÃå…î th≈≠≈ã",
    "meaning": "bag",
    "emoji": "üëú",
    "class": "high"
  },
  {
    "symbol": "‡∏ó",
    "name": "th…î…î th√°-h…ëÃåan",
    "meaning": "soldier",
    "emoji": "üíÇ",
    "class": "low"
  },
  {
    "symbol": "‡∏ò",
    "name": "th…î…î tho≈ã",
    "meaning": "flag",
    "emoji": "üáπüá≠",
    "class": "low"
  },
  {
    "symbol": "‡∏ô",
    "name": "n…î…î n«îu",
    "meaning": "mouse",
    "emoji": "üê≠",
    "class": "low"
  },
  {
    "symbol": "‡∏ö",
    "name": "b…î…î bai-m√°ay",
    "meaning": "leaf",
    "emoji": "üçÉ",
    "class": "middle"
  },
  {
    "symbol": "‡∏õ",
    "name": "bp…î…î bplaa",
    "meaning": "fish",
    "emoji": "üêü",
    "class": "middle"
  },
  {
    "symbol": "‡∏ú",
    "name": "ph…îÃå…î ph…ØÃÇ≈ã",
    "meaning": "bee",
    "emoji": "üêù",
    "class": "high"
  },
  {
    "symbol": "‡∏ù",
    "name": "f…îÃå…î fƒÉa",
    "meaning": "lid/cover",
    "emoji": "üîí",
    "class": "high"
  },
  {
    "symbol": "‡∏û",
    "name": "ph…î…î phaan",
    "meaning": "offering tray",
    "emoji": "üèÜ",
    "class": "low"
  },
  {
    "symbol": "‡∏ü",
    "name": "f…î…î fan",
    "meaning": "tooth",
    "emoji": "ü¶∑",
    "class": "low"
  },
  {
    "symbol": "‡∏†",
    "name": "ph…î…î sƒÉm-phaw",
    "meaning": "junk",
    "emoji": "üö¢",
    "class": "low"
  },
  {
    "symbol": "‡∏°",
    "name": "m…î…î m√°a",
    "meaning": "horse",
    "emoji": "üêé",
    "class": "low"
  },
  {
    "symbol": "‡∏¢",
    "name": "y…î…î y√°k",
    "meaning": "giant",
    "emoji": "üëπ",
    "class": "high"
  },
  {
    "symbol": "‡∏£",
    "name": "r…î…î r…Øa",
    "meaning": "boat",
    "emoji": "üö£",
    "class": "low"
  },
  {
    "symbol": "‡∏•",
    "name": "l…î…î li≈ã",
    "meaning": "monkey",
    "emoji": "üêí",
    "class": "low"
  },
  {
    "symbol": "‡∏ß",
    "name": "w…î…î w…õÃå…õn",
    "meaning": "ring",
    "emoji": "üíç",
    "class": "low"
  },
  {
    "symbol": "‡∏®",
    "name": "s…îÃå…î s«éa-laa",
    "meaning": "pavilion",
    "emoji": "üèõÔ∏è",
    "class": "high"
  },
  {
    "symbol": "‡∏©",
    "name": "s…îÃå…î r…Ø…Ø-s«êi",
    "meaning": "hermit",
    "emoji": "üßô",
    "class": "high"
  },
  {
    "symbol": "‡∏™",
    "name": "s…îÃå…î s…ØÃåa",
    "meaning": "tiger",
    "emoji": "üêØ",
    "class": "high"
  },
  {
    "symbol": "‡∏´",
    "name": "h…îÃå…î h√¨ip",
    "meaning": "treasure chest",
    "emoji": "üíé",
    "class": "high"
  },
  {
    "symbol": "‡∏¨",
    "name": "l…î…î j√π-laa",
    "meaning": "kite",
    "emoji": "ü™Å",
    "class": "low"
  },
  {
    "symbol": "‡∏≠",
    "name": "…î…î √†a≈ã",
    "meaning": "basin",
    "emoji": "üõÅ",
    "class": "middle"
  },
  {
    "symbol": "‡∏Æ",
    "name": "h…î…î n√≥k-h√ªuk",
    "meaning": "owl",
    "emoji": "ü¶â",
    "class": "low"
  }
]`);

        ThaiQuiz.setupQuiz({
          elements: { symbol: 'symbol', options: 'options', feedback: 'feedback', nextBtn: 'nextBtn', stats: 'stats' },
          pickRound: function(state) {
            var answer = data[Math.floor(Math.random() * data.length)];
            var choices = [answer];
            var numChoices = state.correctAnswers >= 30 ? 6 : 4;
            while (choices.length < numChoices) {
              var rand = data[Math.floor(Math.random() * data.length)];
              if (!choices.find(function(c) { return c.name === rand.name; })) choices.push(rand);
            }
            return { answer: answer, choices: choices };
          },
          renderSymbol: function(answer, els) {
            els.symbolEl.textContent = answer.symbol;
            els.symbolEl.setAttribute('aria-label', 'Thai consonant symbol: ' + answer.symbol);
          },
          renderButtonContent: function(choice, state) {
            var hideEmojis = state.correctAnswers >= 50;
            return hideEmojis ? ('' + choice.name) : ('<span class="emoji">' + choice.emoji + '</span> ' + choice.name);
          },
          ariaLabelForChoice: function(choice) { return 'Answer: ' + choice.name + ' (' + choice.meaning + ')'; },
          decorateButton: function(btn, choice) { btn.classList.add(choice.class + '-class'); },
          isCorrect: function(choice, answer) { return choice.name === answer.name; }
        });
      }
    },

    vowels: {
      title: 'Thai Vowel Quiz',
      subtitle: '',
      bodyClass: 'vowel-quiz',
      init: function() {
        var data = JSON.parse(`[
  { "symbol": "-‡∏∞", "sound": "a", "example": "but, cut" },
  { "symbol": "-‡∏≤", "sound": "aa", "example": "baht, cart" },
  { "symbol": "-‡∏¥", "sound": "i", "example": "did, bit" },
  { "symbol": "-‡∏µ", "sound": "ii", "example": "beat, deed" },
  { "symbol": "-‡∏∂", "sound": "…Ø", "example": "-" },
  { "symbol": "-‡∏∑", "sound": "…Ø…Ø", "example": "-" },
  { "symbol": "-‡∏∏", "sound": "u (ou)", "example": "foot, book" },
  { "symbol": "-‡∏π", "sound": "uu (ouuu)", "example": "blue, too" },
  { "symbol": "‡πÄ-‡∏∞", "sound": "e (√©)", "example": "yet, bet" },
  { "symbol": "‡πÄ-", "sound": "ee (√©√©√©)", "example": "fate, taste" },
  { "symbol": "‡πÅ-‡∏∞", "sound": "…õ (√®)", "example": "fat, black" },
  { "symbol": "‡πÅ-", "sound": "…õ…õ (√®√®√®)", "example": "can, fan" },
  { "symbol": "‡πÇ-‡∏∞", "sound": "o", "example": "only, Toyota" },
  { "symbol": "‡πÇ-", "sound": "oo", "example": "tone, doe" },
  { "symbol": "‡πÄ-‡∏≤‡∏∞", "sound": "…î", "example": "cot, watch" },
  { "symbol": "-‡∏≠", "sound": "…î…î", "example": "bought, cause" },
  { "symbol": "‡πÄ-‡∏≠‡∏∞", "sound": "…ô (e)", "example": "modern, gentle" },
  { "symbol": "‡πÄ-‡∏≠", "sound": "…ô…ô (eee)", "example": "birth, dirt" },
  { "symbol": "‡πÄ-‡∏µ‡∏¢", "sound": "i…ë", "example": "tear, dear" },
  { "symbol": "‡πÄ-‡∏∑‡∏≠", "sound": "…Ø…ë", "example": "-" },
  { "symbol": "-‡∏±‡∏ß", "sound": "u…ë", "example": "tour" },
  { "symbol": "‡πÑ-", "sound": "…ëi", "example": "why, hi" },
  { "symbol": "‡πÉ-", "sound": "…ëi", "example": "why, hi" },
  { "symbol": "-‡∏≥", "sound": "…ëm", "example": "yummy" },
  { "symbol": "‡πÄ-‡∏≤", "sound": "…ëw", "example": "doubt, about" }
]`);

        ThaiQuiz.setupQuiz({
          elements: { symbol: 'symbol', options: 'options', feedback: 'feedback', nextBtn: 'nextBtn', stats: 'stats' },
          pickRound: function() {
            var answer = data[Math.floor(Math.random() * data.length)];
            var choices = [answer];
            while (choices.length < 4) {
              var rand = data[Math.floor(Math.random() * data.length)];
              if (!choices.includes(rand)) choices.push(rand);
            }
            return { answer: answer, choices: choices, symbolText: answer.symbol };
          },
          renderButtonContent: function(choice) { return choice.sound; },
          isCorrect: function(choice, answer) { return choice.sound === answer.sound; }
        });
      }
    },

    colors: {
      title: 'Thai Color Quiz',
      subtitle: 'Choose the correct phonetic for the Thai color',
      bodyClass: 'color-quiz',
      init: function() {
        var baseColors = JSON.parse(`[
  {"english":"white","thai":"‡∏™‡∏µ‡∏Ç‡∏≤‡∏ß","phonetic":"s«êi kh«éaw","hex":"#ecf0f1"},
  {"english":"black","thai":"‡∏™‡∏µ‡∏î‡∏≥","phonetic":"s«êi dam","hex":"#2d3436"},
  {"english":"red","thai":"‡∏™‡∏µ‡πÅ‡∏î‡∏á","phonetic":"s«êi d…õ…õ≈ã","hex":"#e74c3c"},
  {"english":"yellow","thai":"‡∏™‡∏µ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á","phonetic":"s«êi l…ØÃåa≈ã","hex":"#f1c40f"},
  {"english":"green","thai":"‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß","phonetic":"s«êi kh«êaw","hex":"#2ecc71"},
  {"english":"sky blue","thai":"‡∏™‡∏µ‡∏ü‡πâ‡∏≤","phonetic":"s«êi f√°a","hex":"#3498db"},
  {"english":"dark blue","thai":"‡∏™‡∏µ‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô","phonetic":"s«êi n√°am-≈ã…ô…ôn","hex":"#2c3e50"},
  {"english":"orange","thai":"‡∏™‡∏µ‡∏™‡πâ‡∏°","phonetic":"s«êi s√¥m","hex":"#e67e22"},
  {"english":"pink","thai":"‡∏™‡∏µ‡∏ä‡∏°‡∏û‡∏π","phonetic":"s«êi chom-phuu","hex":"#e91e63"},
  {"english":"purple","thai":"‡∏™‡∏µ‡∏°‡πà‡∏ß‡∏á","phonetic":"s«êi m√ªa≈ã","hex":"#8e44ad"},
  {"english":"brown","thai":"‡∏™‡∏µ‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•","phonetic":"s«êi n√°am-dtaan","hex":"#8d6e63"},
  {"english":"gray","thai":"‡∏™‡∏µ‡πÄ‡∏ó‡∏≤","phonetic":"s«êi thaw","hex":"#95a5a6"}
]`);

        var modifiers = JSON.parse(`[
  {"english":"light","thai":"‡∏≠‡πà‡∏≠‡∏ô","phonetic":"…îÃÄ…în"},
  {"english":"dark","thai":"‡πÄ‡∏Ç‡πâ‡∏°","phonetic":"kh√™m"}
]`);

        function hexToRgb(hex) {
          var h = hex.replace('#', '');
          var bigint = parseInt(h, 16);
          return { r: (bigint >> 16) & 255, g: (bigint >> 8) & 255, b: bigint & 255 };
        }
        function rgbToHex(r, g, b) {
          var toHex = function(x) { return x.toString(16).padStart(2, '0'); };
          return '#' + toHex(Math.max(0, Math.min(255, Math.round(r)))) + toHex(Math.max(0, Math.min(255, Math.round(g)))) + toHex(Math.max(0, Math.min(255, Math.round(b))));
        }
        function rgbToHsl(r, g, b) {
          r /= 255; g /= 255; b /= 255;
          var max = Math.max(r, g, b), min = Math.min(r, g, b);
          var h, s, l = (max + min) / 2;
          if (max === min) { h = s = 0; }
          else {
            var d = max - min;
            s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
            switch (max) {
              case r: h = (g - b) / d + (g < b ? 6 : 0); break;
              case g: h = (b - r) / d + 2; break;
              case b: h = (r - g) / d + 4; break;
            }
            h /= 6;
          }
          return { h: h, s: s, l: l };
        }
        function hslToRgb(h, s, l) {
          var r, g, b;
          if (s === 0) { r = g = b = l; }
          else {
            var hue2rgb = function(p, q, t) {
              if (t < 0) t += 1;
              if (t > 1) t -= 1;
              if (t < 1/6) return p + (q - p) * 6 * t;
              if (t < 1/2) return q;
              if (t < 2/3) return p + (q - p) * (2/3 - t) * 6;
              return p;
            };
            var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
            var p = 2 * l - q;
            r = hue2rgb(p, q, h + 1/3);
            g = hue2rgb(p, q, h);
            b = hue2rgb(p, q, h - 1/3);
          }
          return { r: r * 255, g: g * 255, b: b * 255 };
        }
        function adjustLightness(hex, delta) {
          var rgb = hexToRgb(hex);
          var hsl = rgbToHsl(rgb.r, rgb.g, rgb.b);
          var newL = Math.max(0, Math.min(1, hsl.l + delta));
          var nrgb = hslToRgb(hsl.h, hsl.s, newL);
          return rgbToHex(nrgb.r, nrgb.g, nrgb.b);
        }
        function getDisplayHex(baseHex, modifier) {
          if (!modifier) return baseHex;
          if (/^light$/i.test(modifier.english)) return adjustLightness(baseHex, 0.25);
          if (/^dark$/i.test(modifier.english)) return adjustLightness(baseHex, -0.25);
          return baseHex;
        }
        function buildColorPhrase(base, maybeModifier) {
          var hasBuiltInShade = /(^|\s)(dark|light)\s/i.test(base.english);
          var useModifier = !!maybeModifier && !hasBuiltInShade;
          var thai = useModifier ? (base.thai + ' ' + maybeModifier.thai) : base.thai;
          var phonetic = useModifier ? (base.phonetic + ' ' + maybeModifier.phonetic) : base.phonetic;
          var english = useModifier ? (maybeModifier.english + ' ' + base.english) : base.english;
          var hex = useModifier ? getDisplayHex(base.hex, maybeModifier) : base.hex;
          return { english: english, thai: thai, phonetic: phonetic, hex: hex };
        }

        ThaiQuiz.setupQuiz({
          elements: { symbol: 'symbol', options: 'options', feedback: 'feedback', nextBtn: 'nextBtn', stats: 'stats' },
          pickRound: function() {
            var base = baseColors[Math.floor(Math.random() * baseColors.length)];
            var maybeModifier = Math.random() < 0.55 ? modifiers[Math.floor(Math.random() * modifiers.length)] : null;
            var answer = buildColorPhrase(base, maybeModifier);
            var choices = [answer];
            while (choices.length < 4) {
              var b = baseColors[Math.floor(Math.random() * baseColors.length)];
              var m = Math.random() < 0.45 ? modifiers[Math.floor(Math.random() * modifiers.length)] : null;
              var choice = buildColorPhrase(b, m);
              if (!choices.find(function(c) { return c.phonetic === choice.phonetic; })) choices.push(choice);
            }
            return { answer: answer, choices: choices, symbolText: answer.thai, symbolStyle: { color: answer.hex }, symbolAriaLabel: 'Thai color phrase: ' + answer.thai };
          },
          renderButtonContent: function(choice) { return choice.phonetic; },
          ariaLabelForChoice: function(choice) { return 'Answer: ' + choice.phonetic; },
          isCorrect: function(choice, answer) { return choice.phonetic === answer.phonetic; }
        });
      }
    },

    numbers: {
      title: 'Thai Numbers Quiz',
      subtitle: 'Choose the correct phonetic for the Thai number',
      bodyClass: 'numbers-quiz',
      init: function() {
        try {
          var footer = document.querySelector('.footer');
          if (footer) {
            var tip = document.createElement('div');
            tip.className = 'pro-tip';
            tip.innerHTML = '<small>Pro tip: Insert a classifier after the number for counting. e.g., 2 bottles = <strong>‡∏™‡∏≠‡∏á‡∏Ç‡∏ß‡∏î</strong> (<em>s…îÃå…î≈ã kh√πat</em>), 5 people = <strong>‡∏´‡πâ‡∏≤‡∏Ñ‡∏ô</strong> (<em>h√¢a khon</em>).</small>';
            footer.appendChild(tip);
          }
        } catch (e) {}

        var data = JSON.parse(`[
  {"number":"0","thai":"‡∏®‡∏π‡∏ô‡∏¢‡πå","phonetic":"s«îun"},
  {"number":"1","thai":"‡∏´‡∏ô‡∏∂‡πà‡∏á","phonetic":"n…ØÃÄ≈ã"},
  {"number":"2","thai":"‡∏™‡∏≠‡∏á","phonetic":"s…îÃå…î≈ã"},
  {"number":"3","thai":"‡∏™‡∏≤‡∏°","phonetic":"sƒÉam"},
  {"number":"4","thai":"‡∏™‡∏µ‡πà","phonetic":"s√¨i"},
  {"number":"5","thai":"‡∏´‡πâ‡∏≤","phonetic":"h√¢a"},
  {"number":"6","thai":"‡∏´‡∏Å","phonetic":"h√≤k"},
  {"number":"7","thai":"‡πÄ‡∏à‡πá‡∏î","phonetic":"j√®t"},
  {"number":"8","thai":"‡πÅ‡∏õ‡∏î","phonetic":"bp…õÃÄ…õt"},
  {"number":"9","thai":"‡πÄ‡∏Å‡πâ‡∏≤","phonetic":"g√¢ao"},
  {"number":"10","thai":"‡∏™‡∏¥‡∏ö","phonetic":"s√¨p"},

  {"number":"11","thai":"‡∏™‡∏¥‡∏ö‡πÄ‡∏≠‡πá‡∏î","phonetic":"s√¨p-√®t"},
  {"number":"12","thai":"‡∏™‡∏¥‡∏ö‡∏™‡∏≠‡∏á","phonetic":"s√¨p-s…îÃå…î≈ã"},
  {"number":"13","thai":"‡∏™‡∏¥‡∏ö‡∏™‡∏≤‡∏°","phonetic":"s√¨p-sƒÉam"},
  {"number":"14","thai":"‡∏™‡∏¥‡∏ö‡∏™‡∏µ‡πà","phonetic":"s√¨p-s√¨i"},
  {"number":"15","thai":"‡∏™‡∏¥‡∏ö‡∏´‡πâ‡∏≤","phonetic":"s√¨p-h√¢a"},
  {"number":"16","thai":"‡∏™‡∏¥‡∏ö‡∏´‡∏Å","phonetic":"s√¨p-h√≤k"},
  {"number":"17","thai":"‡∏™‡∏¥‡∏ö‡πÄ‡∏à‡πá‡∏î","phonetic":"s√¨p-j√®t"},
  {"number":"18","thai":"‡∏™‡∏¥‡∏ö‡πÅ‡∏õ‡∏î","phonetic":"s√¨p-bp…õÃÄ…õt"},
  {"number":"19","thai":"‡∏™‡∏¥‡∏ö‡πÄ‡∏Å‡πâ‡∏≤","phonetic":"s√¨p-g√¢ao"},

  {"number":"20","thai":"‡∏¢‡∏µ‡πà‡∏™‡∏¥‡∏ö","phonetic":"y√Æi-s√¨p"},
  {"number":"30","thai":"‡∏™‡∏≤‡∏°‡∏™‡∏¥‡∏ö","phonetic":"sƒÉam-s√¨p"},
  {"number":"40","thai":"‡∏™‡∏µ‡πà‡∏™‡∏¥‡∏ö","phonetic":"s√¨i-s√¨p"},
  {"number":"50","thai":"‡∏´‡πâ‡∏≤‡∏™‡∏¥‡∏ö","phonetic":"h√¢a-s√¨p"},
  {"number":"60","thai":"‡∏´‡∏Å‡∏™‡∏¥‡∏ö","phonetic":"h√≤k-s√¨p"},
  {"number":"70","thai":"‡πÄ‡∏à‡πá‡∏î‡∏™‡∏¥‡∏ö","phonetic":"j√®t-s√¨p"},
  {"number":"80","thai":"‡πÅ‡∏õ‡∏î‡∏™‡∏¥‡∏ö","phonetic":"bp…õÃÄ…õt-s√¨p"},
  {"number":"90","thai":"‡πÄ‡∏Å‡πâ‡∏≤‡∏™‡∏¥‡∏ö","phonetic":"g√¢ao-s√¨p"},

  {"number":"100","thai":"‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏£‡πâ‡∏≠‡∏¢","phonetic":"n…ØÃÄ≈ã-r√°awy"},
  {"number":"200","thai":"‡∏™‡∏≠‡∏á‡∏£‡πâ‡∏≠‡∏¢","phonetic":"s…îÃå…î≈ã-r√°awy"},
  {"number":"1,000","thai":"‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏û‡∏±‡∏ô","phonetic":"n…ØÃÄ≈ã-phan"},
  {"number":"10,000","thai":"‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏´‡∏°‡∏∑‡πà‡∏ô","phonetic":"n…ØÃÄ≈ã-m…ØÃÄ…Øn"},
  {"number":"100,000","thai":"‡∏´‡∏ô‡∏∂‡πà‡∏á‡πÅ‡∏™‡∏ô","phonetic":"n…ØÃÄ≈ã-s…õÃå…õn"},
  {"number":"1,000,000","thai":"‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏•‡πâ‡∏≤‡∏ô","phonetic":"n…ØÃÄ≈ã-l√°an"}
]`);

        ThaiQuiz.setupQuiz({
          elements: { symbol: 'symbol', options: 'options', feedback: 'feedback', nextBtn: 'nextBtn', stats: 'stats' },
          pickRound: function() {
            var answer = data[Math.floor(Math.random() * data.length)];
            var choices = [answer];
            while (choices.length < 4) {
              var rand = data[Math.floor(Math.random() * data.length)];
              if (!choices.find(function(c) { return c.phonetic === rand.phonetic; })) choices.push(rand);
            }
            var symbolText = (answer.number || '') + '  ' + (answer.thai || '');
            var symbolAriaLabel = 'Number and Thai: ' + (answer.number || '') + (answer.thai ? ' ' + answer.thai : '');
            return { answer: answer, choices: choices, symbolText: symbolText, symbolAriaLabel: symbolAriaLabel };
          },
          renderSymbol: function(answer, els) {
            var num = answer.number || '';
            var thai = answer.thai || '';
            els.symbolEl.innerHTML = '' + num + (thai ? '<span class="secondary">' + thai + '</span>' : '');
            els.symbolEl.setAttribute('aria-label', 'Number and Thai: ' + num + (thai ? ' ' + thai : ''));
          },
          renderButtonContent: function(choice) { return choice.phonetic; },
          ariaLabelForChoice: function(choice) { return 'Answer: ' + choice.phonetic; },
          isCorrect: function(choice, answer) { return choice.phonetic === answer.phonetic; }
        });
      }
    },

    time: {
      title: 'Thai Time Quiz',
      subtitle: 'Choose the correct phonetic for the Thai time phrase',
      bodyClass: 'time-quiz',
      init: function() {
        var keyWords = JSON.parse(`[
  {"english":"Hour (o‚Äôclock)","thai":"‡πÇ‡∏°‡∏á","phonetic":"moo≈ã"},
  {"english":"Hour (o‚Äôclock)","thai":"‡∏ó‡∏∏‡πà‡∏°","phonetic":"th√ªm"},
  {"english":"Hour (o‚Äôclock)","thai":"‡∏ô‡∏≤‡∏¨‡∏¥‡∏Å‡∏≤","phonetic":"naa-l√≠-gaa"},
  {"english":"Minute","thai":"‡∏ô‡∏≤‡∏ó‡∏µ","phonetic":"naa-thii"},
  {"english":"Second","thai":"‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ","phonetic":"w√≠-naa-thii"},
  {"english":"Time","thai":"‡πÄ‡∏ß‡∏•‡∏≤","phonetic":"wee-laa"},
  {"english":"O‚Äôclock sharp","thai":"‡∏ï‡∏£‡∏á","phonetic":"dtro≈ã"},
  {"english":"Half past (30 min)","thai":"‡∏Ñ‡∏£‡∏∂‡πà‡∏á","phonetic":"khr…ØÃÇ≈ã"},
  {"english":"Quarter","thai":"‡∏´‡∏ô‡∏∂‡πà‡∏á‡πÉ‡∏ô‡∏™‡∏µ‡πà","phonetic":"n…ØÃÄ≈ã nai s√¨i"},
  {"english":"Early morning (1‚Äì5 AM)","thai":"‡∏ï‡∏µ‚Ä¶","phonetic":"dtii ‚Ä¶"},
  {"english":"Morning (6‚Äì11 AM)","thai":"‚Ä¶‡πÇ‡∏°‡∏á‡πÄ‡∏ä‡πâ‡∏≤","phonetic":"‚Ä¶moo≈ã ch√°o"},
  {"english":"Noon","thai":"‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á","phonetic":"th√Æa≈ã"},
  {"english":"Afternoon (1‚Äì3 PM)","thai":"‡∏ö‡πà‡∏≤‡∏¢‚Ä¶‡πÇ‡∏°‡∏á","phonetic":"b√†ay ‚Ä¶ moo≈ã"},
  {"english":"Late afternoon (4‚Äì6 PM)","thai":"‚Ä¶‡πÇ‡∏°‡∏á‡πÄ‡∏¢‡πá‡∏ô","phonetic":"‚Ä¶moo≈ã yen"},
  {"english":"Evening/Night (7‚Äì11 PM)","thai":"‚Ä¶‡∏ó‡∏∏‡πà‡∏°","phonetic":"‚Ä¶th√ªm"},
  {"english":"Midnight","thai":"‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á‡∏Ñ‡∏∑‡∏ô","phonetic":"th√Æa≈ã-k â ân"}
]`);

        var timeFormats = JSON.parse(`[
  {"thai":"‡∏ï‡∏µ‡∏´‡∏ô‡∏∂‡πà‡∏á","phonetic":"dtii n…ØÃÄ≈ã","note":"1 AM"},
  {"thai":"‡∏´‡∏Å‡πÇ‡∏°‡∏á‡πÄ‡∏ä‡πâ‡∏≤","phonetic":"h√≤k moo≈ã ch√°o","note":"6 AM"},
  {"thai":"‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á","phonetic":"th√Æa≈ã","note":"12 PM (noon)"},
  {"thai":"‡∏ö‡πà‡∏≤‡∏¢‡πÇ‡∏°‡∏á","phonetic":"b√†ay moo≈ã","note":"1 PM"},
  {"thai":"‡∏ö‡πà‡∏≤‡∏¢‡∏™‡∏≤‡∏°‡πÇ‡∏°‡∏á","phonetic":"b√†ay sƒÉam moo≈ã","note":"3 PM"},
  {"thai":"‡∏™‡∏µ‡πà‡πÇ‡∏°‡∏á‡πÄ‡∏¢‡πá‡∏ô","phonetic":"s√¨i moo≈ã yen","note":"4 PM"},
  {"thai":"‡∏™‡∏≠‡∏á‡∏ó‡∏∏‡πà‡∏°","phonetic":"s«ín th√ªm","note":"8 PM"},
  {"thai":"‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á‡∏Ñ‡∏∑‡∏ô","phonetic":"th√Æa≈ã-k â ân","note":"12 AM (midnight)"}
]`);

        var examples = JSON.parse(`[
  {"thai":"‡∏Å‡∏µ‡πà‡πÇ‡∏°‡∏á‡πÅ‡∏•‡πâ‡∏ß?","phonetic":"g√¨i moo≈ã l…õÃÅ…õo?","translation":"What time is it now?"},
  {"thai":"‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡πà‡πÇ‡∏°‡∏á‡πÄ‡∏¢‡πá‡∏ô","phonetic":"t√Æi-n√≠i bpen s√¨i moo≈ã yen","translation":"It‚Äôs 4 PM"},
  {"thai":"‡∏ú‡∏°‡∏ï‡∏∑‡πà‡∏ô‡πÄ‡∏ä‡πâ‡∏≤‡∏ï‡∏µ‡∏™‡∏µ‡πà","phonetic":"ph«ím tam ≈ãaan t âÃÄ ân ch√°o s√¨i dtii","translation":"I wake up at 4 AM"},
  {"thai":"‡∏â‡∏±‡∏ô‡∏°‡∏≤‡∏ñ‡∏∂‡∏á‡∏ö‡πâ‡∏≤‡∏ô‡∏ö‡πà‡∏≤‡∏¢‡∏™‡∏≠‡∏á‡πÇ‡∏°‡∏á","phonetic":"ch«én maa th âÃå≈ã b√¢an b√†ay s…îÃå…î≈ã moo≈ã","translation":"I arrived home at 2 PM"},
  {"thai":"‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÄ‡∏à‡∏≠‡∏Å‡∏±‡∏ô‡∏´‡∏Å‡πÇ‡∏°‡∏á‡πÄ‡∏ä‡πâ‡∏≤‡∏ï‡∏£‡∏á","phonetic":"raw j√† jer kan h√≤k moo≈ã ch√°o dtroo≈ã","translation":"Let‚Äôs meet at exactly 6 AM"},
  {"thai":"‡∏û‡∏±‡∏Å‡πÄ‡∏ö‡∏£‡∏Å‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡∏ö‡∏ô‡∏≤‡∏ó‡∏µ","phonetic":"n√°am-ph√†k rao kh·¥êÃå…îp ch√°i wee-laa s√¨p naa-thii","translation":"The break takes 10 minutes"}
]`);

        function englishOf(item) {
          return item.english || item.note || item.translation || '';
        }

        var pool = keyWords.concat(timeFormats, examples);

        ThaiQuiz.setupQuiz({
          elements: { symbol: 'symbol', options: 'options', feedback: 'feedback', nextBtn: 'nextBtn', stats: 'stats' },
          pickRound: function() {
            var answer = pool[Math.floor(Math.random() * pool.length)];
            var choices = [answer];
            while (choices.length < 4) {
              var rand = pool[Math.floor(Math.random() * pool.length)];
              if (!choices.find(function(c) { return c.phonetic === rand.phonetic; })) choices.push(rand);
            }
            var symbolAriaLabel = 'English and Thai: ' + englishOf(answer) + ' ‚Äî ' + answer.thai;
            return { answer: answer, choices: choices, symbolAriaLabel: symbolAriaLabel };
          },
          renderSymbol: function(answer, els) {
            var english = englishOf(answer);
            var thai = answer.thai || '';
            els.symbolEl.innerHTML = '' + english + (thai ? '<span class="secondary">' + thai + '</span>' : '');
            els.symbolEl.setAttribute('aria-label', 'English and Thai: ' + english + (thai ? ' ‚Äî ' + thai : ''));
          },
          renderButtonContent: function(choice) { return choice.phonetic; },
          ariaLabelForChoice: function(choice) { return 'Answer: ' + choice.phonetic; },
          isCorrect: function(choice, answer) { return choice.phonetic === answer.phonetic; }
        });
      }
    },

    questions: {
      title: 'Thai Questions Quiz',
      subtitle: 'Choose the correct phonetic for the Thai question word or pattern',
      bodyClass: 'questions-quiz',
      init: function() {
        try {
          var footer = document.querySelector('.footer');
          if (footer) {
            var tip = document.createElement('div');
            tip.className = 'pro-tip';
            tip.innerHTML = '<small>‚Ä¢ Most yes/no questions end in ‚Äúm√°i?‚Äù<br>‚Ä¢ Add ‚Äúkhr√°p/kh√†‚Äù for politeness at the end<br>‚Ä¢ Use ‚Äúb√¢a≈ã‚Äù after question words for ‚Äúwhat kinds / which ones‚Äù<br>‚Üí khun ch…îÃÇ…îp s«êi √†-rai b√¢a≈ã? (Which colors do you like?)</small>';
            footer.appendChild(tip);
          }
        } catch (e) {}

        var data = JSON.parse(`[
  {"english":"what","thai":"‡∏≠‡∏∞‡πÑ‡∏£","phonetic":"√†-rai"},
  {"english":"who","thai":"‡πÉ‡∏Ñ‡∏£","phonetic":"khrai"},
  {"english":"where","thai":"‡∏ó‡∏µ‡πà‡πÑ‡∏´‡∏ô","phonetic":"th√Æi-n«éi"},
  {"english":"when","thai":"‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏´‡∏£‡πà","phonetic":"m√ªea-r√†i"},
  {"english":"why","thai":"‡∏ó‡∏≥‡πÑ‡∏°","phonetic":"tham-mai"},
  {"english":"have ‚Ä¶ yet","thai":"‚Ä¶ ‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á","phonetic":"rw-yan"},
  {"english":"how","thai":"‡∏¢‡∏±‡∏á‡πÑ‡∏á","phonetic":"ya≈ã-≈ãai"},
  {"english":"how much","thai":"‡πÄ‡∏ó‡πà‡∏≤‡πÑ‡∏´‡∏£‡πà","phonetic":"th√¢o-r√†i"},
  {"english":"how many","thai":"‡∏Å‡∏µ‡πà","phonetic":"g√¨i"},
  {"english":"which","thai":"‡πÑ‡∏´‡∏ô","phonetic":"n«éi"},
  {"english":"is it ‚Ä¶ ?","thai":"‚Ä¶ ‡πÑ‡∏´‡∏°","phonetic":"‚Ä¶ m√°i?"},
  {"english":"can ‚Ä¶ ?","thai":"‚Ä¶ ‡πÑ‡∏î‡πâ‡πÑ‡∏´‡∏°","phonetic":"‚Ä¶ d√¢ay m√°i?"},
  {"english":"have you ever ‚Ä¶ ?","thai":"‡πÄ‡∏Ñ‡∏¢ ‚Ä¶ ‡πÑ‡∏´‡∏°","phonetic":"kh…ô…ôy ‚Ä¶ m√°i?"}
]`);

        var examples = {
          'what': 'What is this? ‚Üí an n√≠i kh â â √†-rai?',
          'who': 'Who is that? ‚Üí khrai kh â â an n√°n?',
          'where': 'Where are you going? ‚Üí khun j√† bpai th√Æi-n«éi?',
          'when': 'When do you work? ‚Üí khun tham ≈ãaan m√ªea-r√†i?',
          'why': 'Why do you like Thai food? ‚Üí tham-mai khun ch…îÃÇ…îp aa-h«éan thai?',
          'how': 'How is the food? ‚Üí aa-h«éan bpen ya≈ã-≈ãai?',
          'how much': 'How much is it? ‚Üí an n√≠i th√¢o-r√†i?',
          'how many': 'How many plates? ‚Üí mii g√¨i jaan?',
          'which': 'Which one do you want? ‚Üí khun ao an n«éi?',
          'is it ‚Ä¶ ?': 'Is it spicy? ‚Üí ph√®t m√°i?',
          'can ‚Ä¶ ?': 'Can you speak Thai? ‚Üí khun ph√ªut phaa-s«éa thai d√¢ay m√°i?',
          'have you ever ‚Ä¶ ?': 'Have you ever tried Pad Thai? ‚Üí khun kh…ô…ôy gin ph√†t-thai m√°i?'
        };

        ThaiQuiz.setupQuiz({
          elements: { symbol: 'symbol', options: 'options', feedback: 'feedback', nextBtn: 'nextBtn', stats: 'stats' },
          pickRound: function() {
            var answer = data[Math.floor(Math.random() * data.length)];
            var choices = [answer];
            while (choices.length < 4) {
              var rand = data[Math.floor(Math.random() * data.length)];
              if (!choices.find(function(c) { return c.phonetic === rand.phonetic; })) choices.push(rand);
            }
            var symbolAriaLabel = 'English and Thai: ' + (answer.english || '') + ' ‚Äî ' + (answer.thai || '');
            return { answer: answer, choices: choices, symbolAriaLabel: symbolAriaLabel };
          },
          renderSymbol: function(answer, els) {
            var thai = answer.thai || '';
            var english = answer.english || '';
            els.symbolEl.innerHTML = '' + english + (thai ? '<span class="secondary">' + thai + '</span>' : '');
            els.symbolEl.setAttribute('aria-label', 'English and Thai: ' + english + (thai ? ' ‚Äî ' + thai : ''));
          },
          renderButtonContent: function(choice) { return choice.phonetic; },
          ariaLabelForChoice: function(choice) { return 'Answer: ' + choice.phonetic; },
          isCorrect: function(choice, answer) { return choice.phonetic === answer.phonetic; },
          onAnswered: function(ctx) {
            var correct = ctx.correct, answer = ctx.answer, state = ctx.state;
            if (!correct) return;
            try {
              var fb = document.getElementById('feedback');
              var ex = examples[answer.english];
              fb.innerHTML = ex ? '<div class="correct-line">‚úÖ Correct!</div><div class="example" aria-label="Example sentence"><span class="label">Example</span><div class="text">' + ex + '</div></div>' : '<div class="correct-line">‚úÖ Correct!</div>';
              if (state && state.autoAdvanceTimerId != null) {
                clearTimeout(state.autoAdvanceTimerId);
              }
              state.autoAdvanceTimerId = setTimeout(function() {
                var next = document.getElementById('nextBtn');
                if (next && next.style.display !== 'none') next.click();
              }, 3000);
            } catch (e) {}
          }
        });
      }
    }
  };

  function setText(id, text) {
    var el = document.getElementById(id);
    if (!el) return;
    if (text) {
      el.textContent = text;
      el.style.display = '';
    } else {
      el.textContent = '';
      el.style.display = 'none';
    }
  }

  function initFromQuery() {
    try {
      var params = new URLSearchParams(window.location.search);
      var quizId = params.get('quiz') || '';
      var config = ThaiQuizConfigs[quizId];
      if (!config) {
        setText('page-title', 'Quiz not found');
        setText('page-subtitle', 'Unknown quiz: ' + quizId);
        return;
      }

      document.title = config.title;
      setText('page-title', config.title);
      setText('page-subtitle', config.subtitle || '');
      if (config.bodyClass) {
        document.body.classList.add(config.bodyClass);
      }

      // Initialize selected quiz
      config.init();
    } catch (e) {
      // no-op
    }
  }

  // Start
  initFromQuery();
})();